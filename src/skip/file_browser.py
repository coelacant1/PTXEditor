# src/ui/file_browser.py
import os
from PyQt6.QtWidgets import (QWidget, QTreeView, QVBoxLayout, QPushButton, 
                               QInputDialog, QMessageBox, QMenu)
from PyQt6.QtGui import QFileSystemModel, QAction
from PyQt6.QtCore import pyqtSignal, Qt

from .cpp_template import DEFAULT_PROJECT_TEMPLATE

TREEVIEW_STYLE = """
    QTreeView {
        background-color: #252526;
        color: #CCCCCC;
        border: none;
        font-size: 14px;
    }
    QTreeView::item {
        padding: 4px;
    }
    QTreeView::item:hover {
        background-color: #2A2D2E;
    }
    QTreeView::item:selected {
        background-color: #37373D;
    }
    QHeaderView::section {
        background-color: #252526;
        border: none;
    }
"""

class FileBrowser(QWidget):
    file_selected = pyqtSignal(str)

    def __init__(self, root_path, parent=None):
        super().__init__(parent)
        self.root_path = root_path
        
        # --- Widgets ---
        self.model = QFileSystemModel()
        self.model.setRootPath(self.root_path)

        self.tree_view = QTreeView()
        self.tree_view.setModel(self.model)
        self.tree_view.setRootIndex(self.model.index(self.root_path))
        
        # --- UI Cleanup ---
        self.tree_view.setHeaderHidden(True)
        self.tree_view.setColumnHidden(1, True)
        self.tree_view.setColumnHidden(2, True)
        self.tree_view.setColumnHidden(3, True)

        self.tree_view.setStyleSheet(TREEVIEW_STYLE)
        self.tree_view.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        
        self.new_project_button = QPushButton("New Project")

        # --- Layout ---
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 5, 0, 0)
        layout.addWidget(self.new_project_button)
        layout.addWidget(self.tree_view)
        self.setLayout(layout)

        # --- Connections ---
        self.tree_view.clicked.connect(self.on_tree_view_clicked)
        self.tree_view.customContextMenuRequested.connect(self.open_context_menu)
        self.new_project_button.clicked.connect(self.create_new_project)

    def open_context_menu(self, position):
        index = self.tree_view.indexAt(position)
        if not index.isValid():
            return

        self.context_menu_path = self.model.filePath(index)
        menu = QMenu()
        
        if self.model.isDir(index):
            action_new_file = QAction("New File...", self)
            action_new_file.triggered.connect(self.create_new_file)
            menu.addAction(action_new_file)
        
        menu.exec(self.tree_view.viewport().mapToGlobal(position))

    def create_new_file(self):
        directory_path = self.context_menu_path
        file_name, ok = QInputDialog.getText(self, "New File", "Enter filename (e.g., my_object.hpp):")
        
        if ok and file_name:
            new_file_path = os.path.join(directory_path, file_name)
            
            if os.path.exists(new_file_path):
                QMessageBox.warning(self, "Error", "A file with that name already exists in this directory.")
                return
            
            try:
                with open(new_file_path, 'w') as f:
                    f.write(f"// File: {file_name}\n// Automatically generated by the editor.\n\n")
                self.log_message(f"Created file: {file_name}")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to create file: {e}")

    def on_tree_view_clicked(self, index):
        if not self.model.isDir(index):
            file_path = self.model.filePath(index)
            self.file_selected.emit(file_path)

    def create_new_project(self):
        project_name, ok = QInputDialog.getText(self, "New Project", "Enter project name:")
        
        if ok and project_name:
            new_project_path = os.path.join(self.root_path, project_name)
            
            if os.path.exists(new_project_path):
                QMessageBox.warning(self, "Error", "A project named '{project_name}' already exists.")
                return

            try:
                os.makedirs(new_project_path)
                cpp_file_path = os.path.join(new_project_path, "project.cpp")
                with open(cpp_file_path, 'w') as f:
                    f.write(DEFAULT_PROJECT_TEMPLATE)
                self.log_message(f"Project '{project_name}' created successfully.")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to create project: {e}")
    
    def set_root(self, path):
        self.root_path = path
        self.tree_view.setRootIndex(self.model.index(self.root_path))

    def log_message(self, message):
        main_window = self.window()
        if hasattr(main_window, 'log_panel'):
            main_window.log_panel.log_message(message)
